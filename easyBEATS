#!/bin/bash

# Script variables
UPDATE_SYSTEM=true #change to false if you don't want to upgrade your whole system
INSTALL_DEPS=true #change to false if you have already run this script successfully before
USE_SWAP=false #change to false if you're using a Pi4 with 2GB of RAM or more
WORKING_DIR="beat-factory" #this directory will be created in /home/pi
#visit https://github.com/elastic/beats/releases to find other version numbers and commit numbers
BEAT_VERSION="v7.16.1" #the version tag name or commit id of the Beats release you want to use
#add as many beats as you want to BEAT_NAME separated by a space
GO_VERSION="1.17.5" # Find versions here: https://go.dev/dl/
BEAT_NAME=( metricbeat filebeat ) #metricbeat filebeat packetbeat auditbeat heartbeat
INSTALL_LOCAL=true #set to false if you only want to compile without installing
CLEAN_UP=true #set to false if you want to keep the source files on your Pi

function clean_up {
  sudo rm -rf $HOME/${WORKING_DIR} /tmp/beats /tmp/mage
  echo "Working directory deleted."
}

function compile_beats {
  for beat in "${BEAT_NAME[@]}";
  do
    echo "Compiling $beat"
    cd /tmp/beats
    go mod download
    cd /tmp/beats/$beat
    mage build;
    echo "$beat created"
  done
  if [ $USE_SWAP = true ];
  then
    sudo swapoff -v /swapfile
    sudo rm /swapfile
    echo "Swap space disabled."
  fi
}

function configure_swap {
  sudo fallocate -l 2G /swapfile
  sudo chmod 600 /swapfile
  sudo mkswap /swapfile
  sudo swapon /swapfile
}

function checkout_version {
  cd /tmp/beats
  git fetch
  git checkout $BEAT_VERSION
}

function copy_source_code {
  cd /tmp
  git clone https://github.com/elastic/beats.git
}

function install_dependencies {
  if [ $(dpkg-query -W -f='${Status}' python-pip 2>/dev/null | grep -c "ok installed") -eq 0 ];
  then
    echo "Installing python-pip..."
    sudo apt-get install python-pip -y;
  fi

  if [ $(dpkg-query -W -f='${Status}' git 2>/dev/null | grep -c "ok installed") -eq 0 ];
  then
    echo "Installing git..."
    sudo apt-get install git -y;
  fi

  if python -c 'import pkgutil; exit(pkgutil.find_loader("virtualenv"))';
  then
    echo "Installing virtualenv..."
    pip install virtualenv
  fi

  if [ $(dpkg-query -W -f='${Status}' make 2>/dev/null | grep -c "ok installed") -eq 0 ];
  then
    echo "Installing make..."
    sudo apt-get install make -y;
  fi

  if [ $(dpkg-query -W -f='${Status}' gcc 2>/dev/null | grep -c "ok installed") -eq 0 ];
  then
    echo "Installing GCC..."
    sudo apt-get install build-essential manpages-dev -y;
  fi

  if [ $(dpkg-query -W -f='${Status}' golang-go 2>/dev/null | grep -c "ok installed") -eq 1 ];
  then
    echo "Removing outdated go version"
    sudo apt remove golang-go -y;
    sudo apt autoremove -y;
  fi

  echo "Installing go..."
  wget https://dl.google.com/go/go${GO_VERSION}.linux-armv6l.tar.gz
  sudo tar -C /usr/share -xzf go${GO_VERSION}.linux-armv6l.tar.gz
  sudo chmod -R 775 /usr/share/go/
  sudo chmod -R 777 /usr/share/go/pkg/linux_arm/
  export PATH=$PATH:/usr/share/go/bin;
  export GOPATH=$HOME/${WORKING_DIR};
  rm go${GO_VERSION}.linux-armv6l.tar.gz;

  sudo apt-get install libpcap-dev -y

  cd /tmp
  git clone https://github.com/magefile/mage
  cd mage
  go run bootstrap.go
  export PATH=$(go env GOPATH)/bin:$PATH

  echo "Dependency installation complete."
}

function create_working_directory {
  mkdir -p $HOME/${WORKING_DIR}/src/github.com/elastic;
  echo "Working directory created"
}

function update_system {
  sudo DEBIAN_FRONTEND=noninteractive apt-get -yq update > /dev/null
  sudo DEBIAN_FRONTEND=noninteractive apt-get -yq upgrade > /dev/null
  echo "System update complete"
}

function install_local {
  for beat in "${BEAT_NAME[@]}";
  do
    if [ ! -d /usr/share/$beat ];
    then
      echo "Creating /usr/share/$beat directory..."
      sudo mkdir -p /usr/share/$beat/bin;
    fi

    if  [ ! -d /etc/$beat ];
    then
      echo "Creating /etc/$beat directory..."
      sudo mkdir -p /etc/$beat;
    fi

    if [ ! -d /var/lib/$beat ];
    then
      echo "Creating /var/lib/$beat directory..."
      sudo mkdir -p /var/lib/$beat
    fi

    echo "Installing $beat locally..."
    sudo cp /tmp/beats/${beat}/${beat} /usr/share/${beat}/bin
    sudo cp /tmp/beats/${beat}/${beat}.reference.yml /etc/${beat}
    sudo cp /tmp/beats/${beat}/${beat}.yml /etc/${beat}

    if [ $beat = "filebeat" ] || [ $beat = "metricbeat" ];
    then
      sudo cp -R /tmp/beats/${beat}/module /usr/share/${beat}
      sudo cp -R /tmp/beats/${beat}/modules.d/ /etc/${beat}
    fi

    sudo cp $HOME/easyBEATS/services/${beat}.service /lib/systemd/system



    sudo chmod -R 755 /etc/${beat}/;
    sudo chown -R root:root /etc/${beat};
    sudo chown -R root:root /usr/share/${beat}/*;
    sudo /bin/systemctl daemon-reload;
    sudo systemctl enable ${beat};
  done
}

echo "---------------------------------------------------------------"
if [ $UPDATE_SYSTEM = true ];
then
  echo "Performing system update..."
  update_system
else
  echo "Skipping system update"
fi

echo "---------------------------------------------------------------"

if [ ! -d $HOME/${WORKING_DIR} ];
then
  create_working_directory
else
  echo "Working directory already exists"
fi

echo "---------------------------------------------------------------"

if [ $INSTALL_DEPS = true ];
then
  echo "Installing dependencies..."
  install_dependencies
else
  export PATH=$PATH:/usr/share/go/bin;
  export GOPATH=$HOME/${WORKING_DIR};
  export PATH=$(go env GOPATH)/bin:$PATH;
  echo "Skipping dependency installation"
fi

echo "---------------------------------------------------------------"

echo "Copying source code from Elastic"
copy_source_code

echo "---------------------------------------------------------------"

echo "Checking out Beats version $BEAT_VERSION"
checkout_version

echo "---------------------------------------------------------------"

if [ $USE_SWAP = true ];
then
  echo "Configuring swap space..."
  configure_swap
else
  echo "Proceeding without swap space."
fi

echo "---------------------------------------------------------------"

echo "Compiling Beats..."
compile_beats

echo "---------------------------------------------------------------"

if [ $INSTALL_LOCAL = true ];
then
  echo "Installing on your local system..."
  install_local
fi

if [ $CLEAN_UP = true ];
then
  echo "Cleaning up working files..."
  clean_up
fi

echo "Complete"
